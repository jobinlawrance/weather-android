package com.jobinlawrance.weather.ui

import android.util.Log
import com.jobinlawrance.weather.data.WeatherData
import com.jobinlawrance.weather.data.database.WeatherDao
import com.jobinlawrance.weather.data.network.WeatherApi
import com.jobinlawrance.weather.data.network.model.WeatherResponse
import io.reactivex.disposables.CompositeDisposable

/**
 * Created by jobinlawrance on 16/12/17.
 */
class HomePresenterImpl(val weatherApi: WeatherApi, val weatherDao: WeatherDao) : HomePresenter {

    var homeView: HomeView? = null
    val compositeDisposable = CompositeDisposable()

    override fun subscribe(view: HomeView) {
        homeView = view

        //Subscribing to database updates -> whenever a new value is added, onNext is called
        val disposable =
                weatherDao
                        .getWeatherDataListReverseSorted()
                        .subscribe(this::updateView)

        compositeDisposable.add(disposable)
    }

    override fun unSubscribe() {
        homeView = null
        compositeDisposable.clear()
    }

    /*
    * gets the weather data from API and stores it in the database
    */
    override fun getWeatherData(lat: Double, lng: Double) {
        val disposable =
                weatherApi
                        .getWeatherForLatLng(lat, lng)
                        .map(this::mapWeatherResponseToWeatherData)
                        .subscribe({ weatherData ->
                            weatherDao.insertWeatherData(weatherData)
                        }, {
                            Log.d("###Home", "Error", it)
                        })

        compositeDisposable.add(disposable)
    }


    private fun mapWeatherResponseToWeatherData(weatherResponse: WeatherResponse): WeatherData {
        return WeatherData(
                null, //auto-generated by room
                weatherResponse.coord?.lat,
                weatherResponse.coord?.lon,
                weatherResponse.name,
                weatherResponse.main?.temp,
                weatherResponse.wind?.speed)
    }

    fun updateView(weatherDataList: List<WeatherData>) {

        if (weatherDataList.isEmpty()) {
            homeView?.showEmptyPreviousWeather()

        } else if (weatherDataList.size == 1) {

            homeView?.showWeatherData(weatherDataList[0])
            homeView?.showEmptyPreviousWeather()

        } else {

            val latestWeatherData = weatherDataList[0]
            homeView?.showWeatherData(latestWeatherData)
            homeView?.showPreviousWeatherData(weatherDataList.subList(1, weatherDataList.size)) //sublist(x,y) -> y is exclusive

        }
    }

}